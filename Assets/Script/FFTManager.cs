using UnityEngine;
using System.Collections;
using AForge .Math ;
//using 
/// <summary>
/// audioprocessor的方法/// 
/// </summary>
public class FFTManager : MonoBehaviour {
//	namespace FFT
//{
//public class FFTManager
//{
	int NFFT;
	float[] fftdata;
	int length = 256;


	void CalFFT(int isign)
	{
		int n, mmax, m, j, istep, i;
		float  wtemp, wr, wpr, wpi, wi, theta;
		float tempr, tempi;
		n = NFFT << 1;
		j = 1;
		for (i = 1; i < n; i += 2)
		{
			if (j > i)
			{
				tempr = fftdata[j]; fftdata[j] = fftdata[i]; fftdata[i] = tempr;
				tempr = fftdata[j + 1]; fftdata[j + 1] = fftdata[i + 1]; fftdata[i + 1] = tempr;
			}
			m = n >> 1;
			while (m >= 2 && j > m)
			{
				j -= m;
				m >>= 1;
			}
			j += m;
		}
		mmax = 2;
		while (n > mmax)
		{
			istep = 2 * mmax;
			theta = 2 * Mathf  .PI / (isign * mmax);
			wtemp = Mathf.Sin(0.5f * theta);
			wpr = -2.0f * wtemp * wtemp;
			wpi = Mathf.Sin (theta);
			wr = 1.0f;
			wi = 0.0f;
			for (m = 1; m < mmax; m += 2)
			{
				for (i = m; i <= n; i += istep)
				{
					j = i + mmax;
					tempr = wr * fftdata[j] - wi * fftdata[j + 1];
					tempi = wr * fftdata[j + 1] + wi * fftdata[j];
					fftdata[j] = fftdata[i] - tempr;
					fftdata[j + 1] = fftdata[i + 1] - tempi;
					fftdata[i] += tempr;
					fftdata[i + 1] += tempi;
				}
				wr = (wtemp = wr) * wpr - wi * wpi + wr;
				wi = wi * wpr + wtemp * wpi + wi;
			}
			mmax = istep;
		}
	}

	public void FFTManagerinit(int Nx)
	{
//		NFFT = (int)Mathf.Pow(2.0f, Mathf.Ceil(Mathf.Log10((float )Nx) / Mathf.Log10(2.0f)));
		NFFT=Mathf.NextPowerOfTwo(Nx );
		fftdata = new float[2*NFFT+1];
	}

	public void CalNFFT(int Nx,float[] data)
	{
		int i = 0;
		for (i = 0; i < Nx; i++)
		{
			fftdata[2*i+1] = data[i];
			fftdata[2*i+2] = 0.0f;
		}
		/* pad the remainder of the array with zeros (0 + 0 j) */
		for (i = Nx; i < NFFT; i++)
		{
			fftdata[2 * i + 1] = 0.0f;
			fftdata[2 * i + 2] = 0.0f;
		}

		CalFFT(1);

		for (i = 0; i < Nx; i++)
		{
			data[i] = fftdata[2*i+1];
		}
	}


	public void testfft()
	{
		//结果与getspem最接近
		//int test = 128;
		FFTManagerinit (length);
		//float[] data={-0.4671015f,-0.4489561f,-0.3506886f,-0.2940752f,-0.3443512f,-0.4261942f,-0.4216127f,-0.3579025f,-0.3367245f,-0.3881326f,-0.4468037f,-0.4519297f,-0.4175656f,-0.4057757f,-0.4490566f,-0.507338f,-0.499439f,-0.4025084f,-0.3418621f,-0.391583f,-0.4290631f,-0.3686579f,-0.2874111f,-0.2791567f,-0.3333546f,-0.3771489f,-0.3679349f,-0.3115831f,-0.2361692f,-0.205928f,-0.2674995f,-0.3523813f,-0.4108945f,-0.4480685f,-0.45561f,-0.4329845f,-0.3998931f,-0.3648664f,-0.326448f,-0.3084148f,-0.3359526f,-0.33668f,-0.2227335f,-0.1375056f,-0.2047283f,-0.2817824f,-0.2117366f,-0.03067099f,0.1325354f,0.2251397f,0.2866853f,0.3419436f,0.3563427f,0.3396175f,0.4052128f,0.5655062f,0.6076923f,0.4897988f,0.3881745f,0.4003267f,0.4486199f,0.4566019f,0.4570129f,0.5007881f,0.5452156f,0.5369127f,0.5236734f,0.535898f,0.5251644f,0.5212737f,0.5734285f,0.6484504f,0.6725816f,0.6145085f,0.5170207f,0.4608375f,0.4909478f,0.5601056f,0.5599791f,0.4437896f,0.3080614f,0.2813075f,0.3916111f,0.5352585f,0.590978f,0.5650865f,0.5587434f,0.6163322f,0.667022f,0.6452882f,0.5881106f,0.5290624f,0.4674966f,0.4610982f,0.4935057f,0.4774015f,0.4313717f,0.4537602f,0.5604827f,0.659514f,0.6754787f,0.6291142f,0.5559838f,0.4669501f,0.4266595f,0.4407771f,0.4143518f,0.3279061f,0.2440245f,0.2008781f,0.1926336f,0.2014508f,0.2089205f,0.1989259f,0.1982872f,0.2744169f,0.387326f,0.3910131f,0.3256539f,0.3157545f,0.3592375f,0.3694392f,0.3150217f,0.2463091f,0.2212083f,0.2382626f,0.2424251f,0.1793114f};

		//float[] data=windowRect (spem);//spem;//new float[test] ;//
			//{0.1041129f,0.1036635f,0.1052419f,0.1057416f,0.1049703f,0.1060077f,0.1066843f,0.1068769f,0.1069715f,0.106446f,0.1060993f,0.1058643f,0.1052831f,0.1045907f,0.1040952f,0.1033654f,0.1027249f,0.1018707f,0.1002725f,0.09851809f,0.09635115f,0.09444541f,0.09250216f,0.09093487f,0.09013779f,0.08648563f,0.07699686f,0.0684679f,0.06997196f,0.07236649f,0.06776825f,0.06665458f,0.06779321f,0.06811523f,0.06939336f,0.07090615f,0.07112982f,0.0695218f,0.06641477f,0.0634374f,0.06353404f,0.0655506f,0.06681231f,0.06757781f,0.06642818f,0.06414999f,0.06356682f,0.06647063f,0.07204661f,0.07719097f,0.08004987f,0.08211096f,0.08488354f,0.08613461f,0.08472483f,0.0825659f,0.0822165f,0.0832589f,0.08342052f,0.08352762f,0.0838558f,0.08331896f,0.08442751f,9.09E-02f,0.09804964f,9.68E-02f,0.09359796f,0.09928968f,0.1057f,0.1081425f,0.1081396f,0.1051908f,0.1012756f,0.09948105f,0.09987226f,0.1003696f,0.1001419f,0.09833466f,0.09322369f,0.08840115f,0.08784933f,0.09013937f,0.09414241f,0.09655434f,0.09495078f,0.09109037f,0.08713128f,0.08349441f,0.08062419f,0.07912382f,0.07703352f,0.07480041f,0.0753051f,0.07575846f,0.07516395f,0.0727569f,0.06446429f,0.04023963f,-0.01404434f,-0.09771536f,-0.1798149f,-0.2184406f,-0.2098463f,-0.1938514f,-0.1959543f,-0.204425f,-0.2101964f,-0.2120482f,-0.2104314f,-0.2066818f,-0.2008072f,-0.1918499f,-0.1808497f,-0.1714373f,-0.1652101f,-0.1591265f,-0.1503226f,-0.1399147f,-0.1299506f,-0.1201643f,-0.1097554f,-0.1009724f,-0.09630208f,-0.09407067f,-0.09056147f,-0.08570269f,-0.08308703f,-0.08341282f};
		float[] data=windowBlackman  (spem);

//		Debug.Log ("datalength="+data.Length+"  fftdatalength="+fftdata.Length );
		string rawdata="testfft windowdata=";
		//data = windowRect (data);
		for (int i = 0; i < length; i++) {
			//data [i] = Mathf.Abs (data[i]);//( spem [i]);// Mathf.Sin (i);
			rawdata += ">>" + data[i];//spem  [i];
		}
		Debug.Log (rawdata);
	
		CalNFFT(length, data);
		string str="testfft";
		//string strA="testfft ABS";
		for (int i = 0; i < length; i++) {
			//str += ">>"+Mathf.Abs( fftdata [i]);
			str += ">>"+Mathf.Abs( data [i]);
		}
			Debug.Log (str);

	}
	public void testfftAF()
	{
		//int test = 128;
		//FFTManagerinit (test);
		Complex[] data=new Complex[length ] ;
	
		//float[] dataf={-0.161499f,-0.1580811f,-0.1656189f,-0.1662292f,-0.1711426f,-0.1741943f,-0.1695557f,-0.16922f,-0.1759338f,-0.1733093f,-0.1805115f,-0.1799927f,-0.188385f,-0.1890869f,-0.2252808f,-0.225769f,-0.1920166f,-0.1920166f,-0.06939697f,-0.06695557f,-0.04464722f,-0.03701782f,-0.09243774f,-0.07995605f,-0.05203247f,-0.03964233f,-0.01220703f,-0.00390625f,-0.0234375f,-0.02056885f,-0.0004882813f,-0.004974365f,0.01062012f,0.001312256f,-0.002075195f,-0.007080078f,0.009613037f,0.01419067f,-0.002105713f,0.007232666f,-0.01922607f,-0.01556396f,-0.009063721f,-0.01831055f,-0.01202393f,-0.03405762f,0.02798462f,-0.002960205f,0.1096497f,0.07568359f,0.1078491f,0.07644653f,0.06225586f,0.0340271f,0.06585693f,0.0380249f,0.06488037f,0.03491211f,0.01953125f,-0.01226807f,-0.05203247f,-0.08172607f,-0.1195374f,-0.1438904f,-0.1325684f,-0.1508484f,-0.1199036f,-0.1314697f,-0.1522522f,-0.1585388f,-0.1902161f,-0.1951599f,-0.174469f,-0.1810303f,-0.1566162f,-0.1639709f,-0.1800232f,-0.1847839f,-0.1879578f,-0.1920166f,-0.1622314f,-0.1718445f,-0.1547241f,-0.1699219f,-0.1560669f,-0.1716919f,-0.1422424f,-0.1552124f,-0.1336365f,-0.1428528f,-0.1207886f,-0.1289673f,-0.1054688f,-0.1181641f,-0.08862305f,-0.1082764f,-0.01376343f,-0.03747559f,0.07693481f,0.05737305f,0.08218384f,0.07345581f,0.05670166f,0.05484009f,0.07183838f,0.06832886f,0.08776855f,0.07830811f,0.09533691f,0.07803345f,0.1154785f,0.09100342f,0.1279602f,0.1022644f,0.1197815f,0.1002502f,0.1037292f,0.09182739f,0.07348633f,0.06558228f,-0.003204346f,-0.0100708f,-0.09185791f,-0.100769f,-0.1042786f,-0.1174011f,-0.07949829f,-0.09207153f,-0.108429f,-0.1166382f,-0.145752f,-0.1535645f,-0.1470337f,-0.1577148f,-0.151123f,-0.1645508f,-0.1513672f,-0.1660156f,-0.1339722f,-0.1445618f,-0.1288452f,-0.131012f,-0.1290894f,-0.1246338f,-0.1254272f,-0.1179504f,-0.1611023f,-0.1505127f,-0.2285461f,-0.2125549f,-0.2411804f,-0.2206116f,-0.1985779f,-0.1772461f,-0.1903076f,-0.1705627f,-0.2024231f,-0.1865234f,-0.1827393f,-0.170166f,-0.1757202f,-0.1601257f,-0.1854553f,-0.1644287f,-0.1781311f,-0.1569519f,-0.1860352f,-0.1701965f,-0.1907349f,-0.1838989f,-0.1611328f,-0.1634521f,-0.1530457f,-0.1601257f,-0.1669312f,-0.1724243f,-0.1708374f,-0.1669617f,-0.1792908f,-0.1633606f,-0.1445923f,-0.1244202f,-0.06484985f,-0.05007935f,-0.05075073f,-0.04705811f,-0.0831604f,-0.09042358f,-0.06759644f,-0.0769043f,-0.05401611f,-0.05447388f,-0.08743286f,-0.07495117f,-0.105835f,-0.08377075f,-0.09579468f,-0.07244873f,-0.09078979f,-0.07339478f};
		//float[] dataf={0.1041129f,0.1036635f,0.1052419f,0.1057416f,0.1049703f,0.1060077f,0.1066843f,0.1068769f,0.1069715f,0.106446f,0.1060993f,0.1058643f,0.1052831f,0.1045907f,0.1040952f,0.1033654f,0.1027249f,0.1018707f,0.1002725f,0.09851809f,0.09635115f,0.09444541f,0.09250216f,0.09093487f,0.09013779f,0.08648563f,0.07699686f,0.0684679f,0.06997196f,0.07236649f,0.06776825f,0.06665458f,0.06779321f,0.06811523f,0.06939336f,0.07090615f,0.07112982f,0.0695218f,0.06641477f,0.0634374f,0.06353404f,0.0655506f,0.06681231f,0.06757781f,0.06642818f,0.06414999f,0.06356682f,0.06647063f,0.07204661f,0.07719097f,0.08004987f,0.08211096f,0.08488354f,0.08613461f,0.08472483f,0.0825659f,0.0822165f,0.0832589f,0.08342052f,0.08352762f,0.0838558f,0.08331896f,0.08442751f,9.09E-02f,0.09804964f,9.68E-02f,0.09359796f,0.09928968f,0.1057f,0.1081425f,0.1081396f,0.1051908f,0.1012756f,0.09948105f,0.09987226f,0.1003696f,0.1001419f,0.09833466f,0.09322369f,0.08840115f,0.08784933f,0.09013937f,0.09414241f,0.09655434f,0.09495078f,0.09109037f,0.08713128f,0.08349441f,0.08062419f,0.07912382f,0.07703352f,0.07480041f,0.0753051f,0.07575846f,0.07516395f,0.0727569f,0.06446429f,0.04023963f,-0.01404434f,-0.09771536f,-0.1798149f,-0.2184406f,-0.2098463f,-0.1938514f,-0.1959543f,-0.204425f,-0.2101964f,-0.2120482f,-0.2104314f,-0.2066818f,-0.2008072f,-0.1918499f,-0.1808497f,-0.1714373f,-0.1652101f,-0.1591265f,-0.1503226f,-0.1399147f,-0.1299506f,-0.1201643f,-0.1097554f,-0.1009724f,-0.09630208f,-0.09407067f,-0.09056147f,-0.08570269f,-0.08308703f,-0.08341282f};
//		float[] dataf={-0.4671015f,-0.4489561f,-0.3506886f,-0.2940752f,-0.3443512f,-0.4261942f,-0.4216127f,-0.3579025f,-0.3367245f,-0.3881326f,-0.4468037f,-0.4519297f,-0.4175656f,-0.4057757f,-0.4490566f,-0.507338f,-0.499439f,-0.4025084f,-0.3418621f,-0.391583f,-0.4290631f,-0.3686579f,-0.2874111f,-0.2791567f,-0.3333546f,-0.3771489f,-0.3679349f,-0.3115831f,-0.2361692f,-0.205928f,-0.2674995f,-0.3523813f,-0.4108945f,-0.4480685f,-0.45561f,-0.4329845f,-0.3998931f,-0.3648664f,-0.326448f,-0.3084148f,-0.3359526f,-0.33668f,-0.2227335f,-0.1375056f,-0.2047283f,-0.2817824f,-0.2117366f,-0.03067099f,0.1325354f,0.2251397f,0.2866853f,0.3419436f,0.3563427f,0.3396175f,0.4052128f,0.5655062f,0.6076923f,0.4897988f,0.3881745f,0.4003267f,0.4486199f,0.4566019f,0.4570129f,0.5007881f,0.5452156f,0.5369127f,0.5236734f,0.535898f,0.5251644f,0.5212737f,0.5734285f,0.6484504f,0.6725816f,0.6145085f,0.5170207f,0.4608375f,0.4909478f,0.5601056f,0.5599791f,0.4437896f,0.3080614f,0.2813075f,0.3916111f,0.5352585f,0.590978f,0.5650865f,0.5587434f,0.6163322f,0.667022f,0.6452882f,0.5881106f,0.5290624f,0.4674966f,0.4610982f,0.4935057f,0.4774015f,0.4313717f,0.4537602f,0.5604827f,0.659514f,0.6754787f,0.6291142f,0.5559838f,0.4669501f,0.4266595f,0.4407771f,0.4143518f,0.3279061f,0.2440245f,0.2008781f,0.1926336f,0.2014508f,0.2089205f,0.1989259f,0.1982872f,0.2744169f,0.387326f,0.3910131f,0.3256539f,0.3157545f,0.3592375f,0.3694392f,0.3150217f,0.2463091f,0.2212083f,0.2382626f,0.2424251f,0.1793114f};
		float[] dataf=windowBlackman  (spem);

		for (int i = 0; i < length; i++) {
			//data [ i].Re  =(double ) Mathf.Abs ( dataf [i]);
			data [ i].Re  =(double )( dataf [i]);
			data [ i].Im   =(double )( dataf [i]);
		}
		string rawdata="testfftAF rawdata=";
		for (int i = 0; i < length; i++) {
			//data [ i] .Re  =(double ) Mathf.Sin  (i);
			rawdata += ">>" + data [i].Re ;
		}
		Debug.Log (rawdata);
		//Debug.Log ("AF datalength="+data.Length+"  dataf length="+dataf.Length );
		FourierTransform.FFT (data, FourierTransform.Direction.Forward);


//		CalNFFT(test, data);
		string str="testfftAF  RE";
		string sti="testfftAF  IM";
		for (int i = 0; i < length; i++) {
			str += ">>"+data  [i].Re ;
			sti += ">>"+data  [i].Im  ;
		}
		Debug.Log (str);
		Debug.Log (sti);
	}

	AudioSource _audio;
	float[] spem;
	float[] spem2;
	public void getdatawhileplay()
	{
		_audio = GetComponent<AudioSource> ();

		spem=new float[length] ;
		spem2=new float[length] ;
		_audio.GetSpectrumData (spem, 0, FFTWindow.Blackman  );
		string str="getdatawhileplay spem1=";
		for (int i = 0; i < length; i++) {
			str +=">>"+ spem [i];
		}
		Debug.Log (str);

//
//
//		_audio.GetSpectrumData (spem, 1, FFTWindow.Rectangular);
//		str="getdatawhileplay spem2=";
//		for (int i = 0; i < length; i++) {
//			str +=">>"+ spem [i];
//		}
//		Debug.Log (str);
//

		_audio.GetOutputData (spem, 0);
		str="getdatawhileplay output1=";
		for (int i = 0; i < length; i++) {
			str +=">>"+ spem [i];
		}
		Debug.LogWarning  (str);

//		_audio.GetOutputData (spem2, 1);
//		str="getdatawhileplay output2=";
//		for (int i = 0; i < length; i++) {
//			str +=">>"+ spem2 [i];
//		}
//		Debug.Log (str);
	}



	float[] windowRect(float[] data){
		int N = data.Length;
		float[] newdata=new float[N] ;
		for (int i = 0; i < (N+ 1) / 2; i++) {
			newdata [i] = data [i];
			newdata [N - 1 - i] = data [i];
		}
		return newdata;
	}

	float[] windowBlackman(float[] data){
		int N = data.Length;
		string teststr="test=";
		float[] newdata=new float[N] ;
		for (int i = 0; i < (N+ 1) / 2; i++) {

			float test = (0.42f - 0.5f * Mathf.Cos (Mathf.PI * 2 * i / (N - 1)) + 0.08f * Mathf.Cos (Mathf.PI * 4 * i / (N - 1)));
			teststr += ">>" + test;
			newdata [i] = data [i]*(0.42f-0.5f*Mathf.Cos(Mathf.PI *2 *i/(N-1))+0.08f*Mathf.Cos(Mathf.PI *4 *i/(N-1)));
			newdata [N - 1 - i] = newdata [i];
		}
		Debug.Log (teststr);
		return newdata;
	}

}
//	}
//}
